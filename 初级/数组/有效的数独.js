/**
 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

 数字 1-9 在每一行只能出现一次。
 数字 1-9 在每一列只能出现一次。
 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

 上图是一个部分填充的有效的数独。

 数独部分空格内已填入了数字，空白格用 '.' 表示。

 示例 1:

 输入:
 [
 ["5","3",".",".","7",".",".",".","."],
 ["6",".",".","1","9","5",".",".","."],
 [".","9","8",".",".",".",".","6","."],
 ["8",".",".",".","6",".",".",".","3"],
 ["4",".",".","8",".","3",".",".","1"],
 ["7",".",".",".","2",".",".",".","6"],
 [".","6",".",".",".",".","2","8","."],
 [".",".",".","4","1","9",".",".","5"],
 [".",".",".",".","8",".",".","7","9"]
 ]
 输出: true
 示例 2:

 输入:
 [
 ["8","3",".",".","7",".",".",".","."],
 ["6",".",".","1","9","5",".",".","."],
 [".","9","8",".",".",".",".","6","."],
 ["8",".",".",".","6",".",".",".","3"],
 ["4",".",".","8",".","3",".",".","1"],
 ["7",".",".",".","2",".",".",".","6"],
 [".","6",".",".",".",".","2","8","."],
 [".",".",".","4","1","9",".",".","5"],
 [".",".",".",".","8",".",".","7","9"]
 ]
 输出: false
 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 说明:

 一个有效的数独（部分已被填充）不一定是可解的。
 只需要根据以上规则，验证已经填入的数字是否有效即可。
 给定数独序列只包含数字 1-9 和字符 '.' 。
 给定数独永远是 9x9 形式的。
 */
var isValidSudoku = function (board) {
  for (let i = 0; i < 9; i++) {
    let rowSet = {};
    let colSet = {};
    let blockSet = {};
    // 行检查
    for (let j = 0; j < 9; j++) {
      let rowVal = board[i][j];
      if (rowVal !== '.') {
        if (!rowSet[rowVal]) {
          rowSet[rowVal] = true;
        } else {
          return false;
        }
      }
    }
    // 列检查
    for (let j = 0; j < 9; j++) {
      let colVal = board[j][i];
      if (colVal !== '.') {
        if (!colSet[colVal]) {
          colSet[colVal] = true;
        } else {
          return false;
        }
      }
    }
    // 块检查
    let colStart = (i % 3) * 3;
    let rowStart = Math.floor(i / 3) * 3;
    for (let j = rowStart; j < rowStart + 3; j++) {
      for (let k = colStart; k < colStart + 3; k++) {
        let blockVal = board[j][k];
        if (blockVal !== '.') {
          if (!blockSet[blockVal]) {
            blockSet[blockVal] = true;
          } else {
            return false;
          }
        }
      }
    }
  }
  return true;
};
